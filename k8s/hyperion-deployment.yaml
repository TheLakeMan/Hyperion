# Hyperion AI Kubernetes Deployment Manifests
# Complete production-ready deployment for ultra-lightweight AI framework

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: hyperion-ai
  labels:
    name: hyperion-ai
    purpose: ai-inference
    
---
# ConfigMap for Hyperion configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: hyperion-config
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: config
data:
  hyperion.conf: |
    # Hyperion AI Configuration for Kubernetes
    [server]
    port = 8080
    host = 0.0.0.0
    workers = 4
    
    [model]
    vocab_size = 5000
    hidden_size = 128
    num_layers = 6
    max_sequence_length = 512
    quantization_bits = 4
    
    [memory]
    limit_mb = 512
    enable_tracking = true
    optimization_level = 3
    
    [performance]
    enable_simd = true
    batch_size = 8
    temperature = 0.7
    top_k = 40
    top_p = 0.9
    
    [logging]
    level = info
    format = json
    output = stdout
    
  startup.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting Hyperion AI in Kubernetes..."
    echo "Pod: $HOSTNAME"
    echo "Namespace: $POD_NAMESPACE"
    echo "Node: $NODE_NAME"
    
    # Initialize configuration
    /opt/hyperion/bin/hyperion --config /etc/hyperion/hyperion.conf --init
    
    # Start server
    exec /opt/hyperion/bin/hyperion --config /etc/hyperion/hyperion.conf --server

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: hyperion-secrets
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: secrets
type: Opaque
data:
  # Base64 encoded values
  api-key: aHlwZXJpb24tYWktYXBpLWtleQ==  # hyperion-ai-api-key
  admin-token: YWRtaW4tdG9rZW4tMTIzNA==   # admin-token-1234

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hyperion-ai
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    version: v1.0.0
    component: inference-engine
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: hyperion-ai
  template:
    metadata:
      labels:
        app: hyperion-ai
        version: v1.0.0
        component: inference-engine
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: hyperion-ai
      containers:
      - name: hyperion-ai
        image: hyperion-ai:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HYPERION_API_KEY
          valueFrom:
            secretKeyRef:
              name: hyperion-secrets
              key: api-key
        - name: HYPERION_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: hyperion-secrets
              key: admin-token
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: config-volume
          mountPath: /etc/hyperion
        - name: model-storage
          mountPath: /opt/hyperion/models
        - name: logs
          mountPath: /opt/hyperion/logs
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: hyperion-config
          defaultMode: 0755
      - name: model-storage
        persistentVolumeClaim:
          claimName: hyperion-models-pvc
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: hyperion-ai

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: hyperion-ai-service
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: hyperion-ai

---
# Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: hyperion-ai-internal
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: internal-service
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: hyperion-ai

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hyperion-ai-hpa
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hyperion-ai
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# Persistent Volume Claim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hyperion-models-pvc
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperion-ai
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: service-account

---
# Role for accessing Kubernetes API
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: hyperion-ai
  name: hyperion-ai-role
  labels:
    app: hyperion-ai
    component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hyperion-ai-rolebinding
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: rbac
subjects:
- kind: ServiceAccount
  name: hyperion-ai
  namespace: hyperion-ai
roleRef:
  kind: Role
  name: hyperion-ai-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hyperion-ai-netpol
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: security
spec:
  podSelector:
    matchLabels:
      app: hyperion-ai
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: hyperion-ai-pdb
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: hyperion-ai

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hyperion-ai-metrics
  namespace: hyperion-ai
  labels:
    app: hyperion-ai
    component: monitoring
spec:
  selector:
    matchLabels:
      app: hyperion-ai
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s