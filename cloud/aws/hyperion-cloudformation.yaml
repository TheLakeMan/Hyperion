AWSTemplateFormatVersion: '2010-09-09'
Description: 'Hyperion AI Ultra-Lightweight Framework - AWS Cloud Deployment'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t4g.nano
      - t4g.micro
      - t4g.small
    Description: EC2 instance type for Hyperion AI deployment
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for deployment
    Default: ''
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for deployment (minimum 2 for different AZs)
    
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment
    
  AutoScalingEnabled:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable auto-scaling based on CPU/memory usage

Conditions:
  CreateVPC: !Equals [!Ref VpcId, '']
  EnableAutoScaling: !Equals [!Ref AutoScalingEnabled, 'true']

Resources:
  # VPC and Networking (if not provided)
  HyperionVPC:
    Type: AWS::EC2::VPC
    Condition: CreateVPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-VPC-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  HyperionSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVPC
    Properties:
      VpcId: !Ref HyperionVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-Subnet-1-${Environment}'

  HyperionSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateVPC
    Properties:
      VpcId: !Ref HyperionVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-Subnet-2-${Environment}'

  HyperionInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-IGW-${Environment}'

  HyperionVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVPC
    Properties:
      VpcId: !Ref HyperionVPC
      InternetGatewayId: !Ref HyperionInternetGateway

  # Security Groups
  HyperionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Hyperion AI instances
      VpcId: !If [CreateVPC, !Ref HyperionVPC, !Ref VpcId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: Hyperion AI API
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-SG-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for EC2 instances
  HyperionInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: HyperionS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${HyperionModelBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref HyperionModelBucket
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-InstanceRole-${Environment}'

  HyperionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref HyperionInstanceRole

  # S3 Bucket for model storage
  HyperionModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hyperion-ai-models-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-Models-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  # Launch Template
  HyperionLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'Hyperion-LaunchTemplate-${Environment}'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt HyperionInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref HyperionSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y git cmake gcc make wget
            
            # Install Docker for containerized deployment
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Create Hyperion directory
            mkdir -p /opt/hyperion
            cd /opt/hyperion
            
            # Clone Hyperion repository
            git clone https://github.com/TheLakeMan/hyperion.git .
            
            # Build Hyperion
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON
            make -j$(nproc)
            
            # Create systemd service
            cat > /etc/systemd/system/hyperion.service << 'EOF'
            [Unit]
            Description=Hyperion AI Service
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/hyperion/build
            ExecStart=/opt/hyperion/build/hyperion --server --port 8080
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Enable and start service
            systemctl daemon-reload
            systemctl enable hyperion
            systemctl start hyperion
            
            # Install CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "metrics": {
                "namespace": "Hyperion/${Environment}",
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                    "metrics_collection_interval": 60,
                    "totalcpu": false
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  }
                }
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/hyperion.log",
                        "log_group_name": "/aws/ec2/hyperion/${Environment}",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 -s \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'Hyperion-Instance-${Environment}'
              - Key: Environment
                Value: !Ref Environment

  # Auto Scaling Group (if enabled)
  HyperionAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: EnableAutoScaling
    Properties:
      AutoScalingGroupName: !Sub 'Hyperion-ASG-${Environment}'
      LaunchTemplate:
        LaunchTemplateId: !Ref HyperionLaunchTemplate
        Version: !GetAtt HyperionLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier: !If 
        - CreateVPC
        - [!Ref HyperionSubnet1, !Ref HyperionSubnet2]
        - !Ref SubnetIds
      TargetGroupARNs:
        - !Ref HyperionTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-ASG-${Environment}'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # Application Load Balancer
  HyperionLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: EnableAutoScaling
    Properties:
      Name: !Sub 'Hyperion-ALB-${Environment}'
      Scheme: internet-facing
      Type: application
      Subnets: !If 
        - CreateVPC
        - [!Ref HyperionSubnet1, !Ref HyperionSubnet2]
        - !Ref SubnetIds
      SecurityGroups:
        - !Ref HyperionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-ALB-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  HyperionTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EnableAutoScaling
    Properties:
      Name: !Sub 'Hyperion-TG-${Environment}'
      Port: 8080
      Protocol: HTTP
      VpcId: !If [CreateVPC, !Ref HyperionVPC, !Ref VpcId]
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub 'Hyperion-TG-${Environment}'
        - Key: Environment
          Value: !Ref Environment

  HyperionListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableAutoScaling
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HyperionTargetGroup
      LoadBalancerArn: !Ref HyperionLoadBalancer
      Port: 80
      Protocol: HTTP

  # CloudWatch Alarms
  HyperionCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAutoScaling
    Properties:
      AlarmName: !Sub 'Hyperion-HighCPU-${Environment}'
      AlarmDescription: 'High CPU utilization for Hyperion instances'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref HyperionAutoScalingGroup
      AlarmActions:
        - !Ref HyperionScaleUpPolicy

  HyperionMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAutoScaling
    Properties:
      AlarmName: !Sub 'Hyperion-HighMemory-${Environment}'
      AlarmDescription: 'High memory utilization for Hyperion instances'
      MetricName: MemoryUtilization
      Namespace: System/Linux
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold

  # Auto Scaling Policies
  HyperionScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: EnableAutoScaling
    Properties:
      AutoScalingGroupName: !Ref HyperionAutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  HyperionScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: EnableAutoScaling
    Properties:
      AutoScalingGroupName: !Ref HyperionAutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

Outputs:
  HyperionEndpoint:
    Description: 'Hyperion AI API endpoint'
    Value: !If 
      - EnableAutoScaling
      - !Sub 'http://${HyperionLoadBalancer.DNSName}'
      - 'Single instance deployment - check EC2 console for instance IP'
    Export:
      Name: !Sub '${AWS::StackName}-Endpoint'

  ModelBucket:
    Description: 'S3 bucket for Hyperion AI models'
    Value: !Ref HyperionModelBucket
    Export:
      Name: !Sub '${AWS::StackName}-ModelBucket'

  SecurityGroup:
    Description: 'Security group for Hyperion instances'
    Value: !Ref HyperionSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'

  VPCId:
    Description: 'VPC ID used for deployment'
    Value: !If [CreateVPC, !Ref HyperionVPC, !Ref VpcId]
    Export:
      Name: !Sub '${AWS::StackName}-VPC'